#!/usr/bin/env bash

THIS_SCRIPT=$(basename "$0")

usage() {
  echo "script usage: $THIS_SCRIPT -h [-j genpipes_json] [-r readset_file] [-l job_list]"
  echo "Usage:"
  echo " -h                               Display this help message."
  echo " -j <genpipes_json>               json file generated by GenPipes /!\ MANDATORY /!\."
  echo " -r <readset_file>                Readset File used to submit GenPipes /!\ MANDATORY /!\."
  echo " -l <job_list>                    job_list file generated by GenPipes /!\ MANDATORY /!\."
  exit 1
  }

genpipes_tagging() {
  echo "Tagging GenPipes json"
  module load mugqic/python/3.11.1
  echo "$ABA_MOH/moh_automation/moh_automation_main/genpipes_deliverables_metrics.py -i $1 -o ${1/.json/_tagged.json}"
  module unload mugqic/python/3.11.1
}

genpipes_ingesting() {
  echo "Ingesting GenPipes json"
  # shellcheck disable=SC1091
  source $ABA_MOH/project_tracking_cli/venv/bin/activate
  echo "pt-cli ingest genpipes --input-json $1"
  deactivate
}

genpipes_transfer() {
  echo "Transfering GenPipes"
  echo "$ABA_MOH/moh_automation/moh_automation_main/transfer_GenPipes.sh -r $1 -p $2 -t $3"
}

while getopts 'hj:r:l:' OPTION; do
  case "$OPTION" in
  j)
    genpipes_json="$OPTARG"
    ;;
  r)
    readset_file="$OPTARG"
    ;;
  l)
    job_list="$OPTARG"
    ;;
  h)
    usage
    ;;
  ?)
    usage
    ;;
  esac
done

# mandatory arguments
if [ ! "$readset_file" ] || [ ! "$genpipes_json" ] || [ ! "$job_list" ]; then
  echo -e "ERROR: Missing mandatory arguments -r and -j and -l.\n"
  usage
fi

operation_cmd_line=$(jq '.operation_cmd_line' "$genpipes_json")
pipeline=$(echo "$operation_cmd_line" | cut -d' ' -f1 | rev | cut -d'/' -f2 | rev)
protocol=$(echo "$genpipes_json" | cut -d'.' -f2 |  cut -d'_' -f1)

# Abacus MOH
ABA_MOH="/lb/project/mugqic/projects/MOH"
# Abacus main folder location
ABA_MAIN="$ABA_MOH/MAIN"

module load mugqic/genpipes
# shellcheck disable=SC2086
log_report_output=$(log_report.pl -nos $job_list)
failure=$(echo "$log_report_output" | grep -v "^#")
# echo "failure: $failure"
if [[ -z $failure ]]; then
  # Let's tag GenPipes + Ingest GenPipes + Transfer it
  genpipes_tagging "$genpipes_json"
  genpipes_ingesting "${genpipes_json/.json/_tagged.json}"
  genpipes_transfer "$readset_file" "$pipeline" "$protocol"
elif [[ $failure == *"FAILED"* ]]; then
  # Let's tag GenPipes + Ingest GenPipes
  genpipes_tagging "$genpipes_json"
  genpipes_ingesting "${genpipes_json/.json/_tagged.json}"
  echo "$log_report_output" > "$ABA_MAIN/job_output/${job_list}.txt"
  echo "Failure found in $job_list Cf. $ABA_MAIN/job_output/${job_list}.txt"
elif [[ $failure == *"ACTIVE"* ]]; then
  # Let's skip and wait
  echo "Job(s) still running for $job_list"
else
  echo "Unknown status in $job_list"
fi
